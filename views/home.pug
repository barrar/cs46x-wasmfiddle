head
  meta(charset='utf-8')
  title WASM Fiddle
  link(rel='stylesheet' href='css/style.css')
  link(rel='icon' href='media/logo.png')
  link(rel='stylesheet' data-name='/vs/editor/editor.main' href='/vs/editor/editor.main.css')
#container
  header
    a#logo(title='WASMFiddle' href='/')
      img(src='media/logo.png' height='100%')
    nav.navbar
      a#buttonRun(href='#') Run
      a(href='#') Save
      a(href='#') Share
      a(href='#') Docs
  main
    #content
      .panel.left-panel
        .panel-label
          span
            | WebAssembly
            span.panel-menu
              | Language:
              input#radioC.programmingLanguageRadio(type='radio' name='programmingLanguage' value='c' checked='checked')
              label.programmingLanguageLabel(for='radioC') C
              input#radioCpp.programmingLanguageRadio(type='radio' name='programmingLanguage' value='cpp')
              label.programmingLanguageLabel(for='radioCpp') C++
              input#radioRust.programmingLanguageRadio(type='radio' name='programmingLanguage' value='rust')
              label.programmingLanguageLabel(for='radioRust') Rust
        #WebAssemblyEditor.monacoEditor
      .panel.right-panel
        .panel-label
          span Output
        #Output
      .panel.left-panel
        .panel-label
          span JavaScript
        #JavaScriptEditor.monacoEditor
      .panel.right-panel
        .panel-label
          span HTML
        #HTMLEditor.monacoEditor
script.
  var require = { paths: { vs: 'vs' } };
script(src='/vs/loader.js')
script(src='/vs/editor/editor.main.nls.js')
script(src='/vs/editor/editor.main.js')
script.
  window.onload = function() {
    window.webassemblyEditor = monaco.editor.create(document.getElementById('WebAssemblyEditor'), {
      minimap: {
        enabled: false
      },
      wordWrap: 'on',
      lineNumbers: 'off',
      folding: false,
      lineDecorationsWidth: 5,
      theme: 'vs-dark',
      automaticLayout: true,
      value: [
        '// Code adapted from https://stackoverflow.com/a/50832655',
        '',
        '#include <stdio.h>',
        '#include <emscripten.h>',
        '',
        'void Copy_ToCanvas(uint32_t* ptr, int w, int h) {',
        '  EM_ASM_({',
        '      let data = Module.HEAPU8.slice($0, $0 + $1 * $2 * 4);',
        '      let context = Module[\'canvas\'].getContext(\'2d\');',
        '      let imageData = context.getImageData(0, 0, $1, $2);',
        '      imageData.data.set(data);',
        '      context.putImageData(imageData, 0, 0);',
        '    }, ptr, w, h);',
        '}',
        '',
        'int main() {',
        '    int screen[320*320],idx=0;',
        '    for (int x=0; x<320*320; x++)',
        '        screen[idx++] = 0xff000000;',
        '    for (int x=0; x<320; x++)',
        '        for (int y=0; y<320; y++)',
        '            screen[320*(x|y) + (x&y)]= 0xffffffff;',
        '    Copy_ToCanvas(screen, 320, 320);',
        '    printf("Hello, world!\\n");',
        '    printf("This is console output...\\n");',
        '    return 0;',
        '}'
      ].join('\n'),
      language: 'c'
    });
    window.javascriptEditor = monaco.editor.create(document.getElementById('JavaScriptEditor'), {
      minimap: {
        enabled: false
      },
      wordWrap: 'on',
      lineNumbers: 'off',
      folding: false,
      lineDecorationsWidth: 5,
      theme: 'vs-dark',
      automaticLayout: true,
      value: [
        'console.log("test")'
      ].join('\n'),
      language: 'javascript'
    });
    window.htmlEditor = monaco.editor.create(document.getElementById('HTMLEditor'), {
      minimap: {
        enabled: false
      },
      wordWrap: 'on',
      lineNumbers: 'off',
      folding: false,
      lineDecorationsWidth: 5,
      theme: 'vs-dark',
      automaticLayout: true,
      value: [
        '<div id="test">',
        '<p class="testing" id="main">Test content.</p>',
        '</div>'
      ].join('\n'),
      language: 'html'
    });

    window.programmingLanguage = "c"
    document.querySelectorAll('.programmingLanguageRadio').forEach(button => {
      button.addEventListener('click', () => {
        var programmingLanguageValue = button.value;
        window.programmingLanguage = programmingLanguageValue;
        switch(programmingLanguageValue){
          case "c":
            monaco.editor.setModelLanguage(webassemblyEditor.getModel(), "c");
            webassemblyEditor.setValue(
              [
                '// Code adapted from https://stackoverflow.com/a/50832655',
                '',
                '#include <stdio.h>',
                '#include <emscripten.h>',
                '',
                'void Copy_ToCanvas(uint32_t* ptr, int w, int h) {',
                '  EM_ASM_({',
                '      let data = Module.HEAPU8.slice($0, $0 + $1 * $2 * 4);',
                '      let context = Module[\'canvas\'].getContext(\'2d\');',
                '      let imageData = context.getImageData(0, 0, $1, $2);',
                '      imageData.data.set(data);',
                '      context.putImageData(imageData, 0, 0);',
                '    }, ptr, w, h);',
                '}',
                '',
                'int main() {',
                '    int screen[320*320],idx=0;',
                '    for (int x=0; x<320*320; x++)',
                '        screen[idx++] = 0xff000000;',
                '    for (int x=0; x<320; x++)',
                '        for (int y=0; y<320; y++)',
                '            screen[320*(x|y) + (x&y)]= 0xffffffff;',
                '    Copy_ToCanvas(screen, 320, 320);',
                '    printf("Hello, world!\\n");',
                '    printf("This is console output...\\n");',
                '    return 0;',
                '}'
              ].join('\n')
            );
          break;
          case "cpp":
            monaco.editor.setModelLanguage(webassemblyEditor.getModel(), "cpp");
            webassemblyEditor.setValue(
              [
                '#include <iostream>',
                '#include <string>',
                'using namespace std;',
                ' ',
                'int main()',
                '{',
                '    string testString = "Hello World";',
                '    cout << testString << endl;',
                '    return 0;',
                '}'
              ].join('\n')
            );
          break;
          case "rust":
            monaco.editor.setModelLanguage(webassemblyEditor.getModel(), "rust");
            webassemblyEditor.setValue(
              [
                'fn main() {',
                '    println!("Hello, world!");',
                '}'
              ].join('\n')
            );
          break;
        }
      });
    });
    var buttonRun = document.getElementById("buttonRun");
    buttonRun.onclick = function() {
      //get source code from editor and encode it with JSON.stringify
      let values = JSON.stringify({
        webassemblyEditorValue: webassemblyEditor.getValue(),
        javascriptEditorValue: javascriptEditor.getValue(),
        htmlEditorValue: htmlEditor.getValue()
      });
      fetch("/compiler/" + window.programmingLanguage, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
          },
          body: values,
        })
        .then(response => response.json())
        .then(data => {
          setTimeout(function() {
            var iframeOutput = document.createElement('iframe');
            iframeOutput.setAttribute('id', 'iframeOutput');
            var divOutput = document.getElementById('Output');
            divOutput.innerHTML = "";
            divOutput.appendChild(iframeOutput);
            iframeOutput.setAttribute('src', data.link);
          }, 5000);
          var divOutput = document.getElementById('Output');
          divOutput.innerHTML = 'Please wait 5 seconds for the code to compile<br><div id="spinner">';
        })
      // here we can just redirect to the link of the compiled module for now...
      return false;
    }
  }